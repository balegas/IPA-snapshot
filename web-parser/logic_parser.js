parser = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleIndices = { start: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          peg$FAILED,
          [],
          function() {ops = []},
          "INV",
          { type: "literal", value: "INV", description: "\"INV\"" },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          function(op) {ops.push(op)},
          function(inv) {return {"INV" : inv , "OPS" : ops}},
          function(left, operator, right) {return { "operator" : operator, "left": left, "right": right}},
          "NOT",
          { type: "literal", value: "NOT", description: "\"NOT\"" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          function(left, operator, right) {return {"operator" : operator, "left" : {"operator" : "not", "formula" : left}, "right" : right}},
          function(formula) {return {"operator" : "not", "formula" : formula}},
          "forall",
          { type: "literal", value: "forall", description: "\"forall\"" },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          function(vars, formula) {return {"operator" : "forall", "vars" : vars, "formula" : formula}},
          "exists",
          { type: "literal", value: "exists", description: "\"exists\"" },
          "in",
          { type: "literal", value: "in", description: "\"in\"" },
          function() {return {"operator" : "exist", "vars" : vars, "formula" : formula}},
          ":=",
          { type: "literal", value: ":=", description: "\":=\"" },
          function(op_name, args, effects) {return {op_name, args, effects}},
          "AND",
          { type: "literal", value: "AND", description: "\"AND\"" },
          function(head, tail) {return [head].append(tail)},
          function(effect) {return [effect]},
          function(pred, operator, value) {return {operator, pred, value}},
          "filter",
          { type: "literal", value: "filter", description: "\"filter\"" },
          function(arg, expression) {return {"filter": arg, expression}},
          "+=",
          { type: "literal", value: "+=", description: "\"+=\"" },
          "-=",
          { type: "literal", value: "-=", description: "\"-=\"" },
          function(pred_name, args) {return {"predicate" : {"name" : pred_name, args : args}}},
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          function(head, tail) {return [head].concat(tail)},
          function(head) {return [head]},
          "true",
          { type: "literal", value: "true", description: "\"true\"" },
          "false",
          { type: "literal", value: "false", description: "\"false\"" },
          function(value) {return {term_type: "const", "value": {value, "type": "bool"}}},
          function(value) {return {term_type: "const", "value": {value, "type": "int"}}},
          function(var_name) {return {term_type: "variable", "value": {var_name, "type":"_"}}},
          function(var_name, type) {return {term_type: "variable", "value": {var_name, type}}},
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          function(var_name, type) {return {term_type: "wildcard", "value": {var_name, type}}},
          function(var_name, type, tail) {return [{var_name, type}].concat(tail)},
          function(var_name, type) {return [{var_name, type}]},
          function(type) {return type},
          "_",
          { type: "literal", value: "_", description: "\"_\"" },
          function(fun_name, args) {return { "term_type": "function", "value" : {fun_name, args}}},
          /^[ \t\n\r]/,
          { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
          ";",
          { type: "literal", value: ";", description: "\";\"" },
          /^[a-zA-Z0-9\-_]/,
          { type: "class", value: "[a-zA-Z0-9\\-_]", description: "[a-zA-Z0-9\\-_]" },
          /^[A-Z]/,
          { type: "class", value: "[A-Z]", description: "[A-Z]" },
          "OR",
          { type: "literal", value: "OR", description: "\"OR\"" },
          "=>",
          { type: "literal", value: "=>", description: "\"=>\"" },
          function(OP) {return OP},
          { type: "other", description: "integer" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          function(digits) { return parseInt(digits.join(""), 10); }
        ],

        peg$bytecode = [
          peg$decode("!! !+& 4!6\"! %+\u012E$ !71,#&71\"+\u011C%.#\"\"2#3$+\u010C% !71,#&71\"+\xFA%.%\"\"2%3&+\xEA% !71,#&71\"+\xD8%7!+\xCE% !71,#&71\"+\xBC%72+\xB2% !71,#&71\"+\xA0% !!!7#+' 4!6'!! %+?$72+5% !71,#&71\"+#%'#%$##  $\"#  \"#  ,V&!!7#+' 4!6'!! %+?$72+5% !71,#&71\"+#%'#%$##  $\"#  \"#  \"+(%4+6(+!$%$+#  $*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7'+>$75+4%7!+*%4#6)##\"! %$##  $\"#  \"#  *\u015B \"!.*\"\"2*3++\xB0$ !71,#&71\"+\x9E%.,\"\"2,3-+\x8E% !71,#&71\"+|%7!+r% !71,#&71\"+`%..\"\"2.3/+P% !71,#&71\"+>%75+4%7!+*%4*60*#%! %$*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  *\xB7 \"!.*\"\"2*3++\x9A$ !71,#&71\"+\x88%.,\"\"2,3-+x% !71,#&71\"+f%7!+\\% !71,#&71\"+J%..\"\"2.3/+:% !71,#&71\"+(%4(61(!#%$(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  *) \"7\"*# \"7'"),
          peg$decode("!.2\"\"2233+\xC7$ !71,#&71\"+\xB5%7.+\xAB% !71,#&71\"+\x99%.4\"\"2435+\x89% !71,#&71\"+w%.,\"\"2,3-+g% !71,#&71\"+U%7!+K% !71,#&71\"+9%..\"\"2.3/+)%4+66+\"(\"%$+#  $*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  *\xCC \"!.7\"\"2738+\xBB$7.+\xB1%.9\"\"293:+\xA1%7/+\x97%.4\"\"2435+\x87% !71,#&71\"+u%.,\"\"2,3-+e% !71,#&71\"+S%7!+I% !71,#&71\"+7%..\"\"2.3/+'%4+6;+ %$+#  $*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!! !73+&$,#&73\"\"\"  +! (%+\xDA$ !71,#&71\"+\xC8% !71,#&71\"+\xB6%.,\"\"2,3-+\xA6% !71,#&71\"+\x94%7)+\x8A% !71,#&71\"+x%..\"\"2.3/+h% !71,#&71\"+V%.<\"\"2<3=+F%7$+<% !71,#&71\"+*%4,6>,#+&!%$,#  $+#  $*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!7%+C$.?\"\"2?3@+3%7$+)%4#6A#\"\" %$##  $\"#  \"#  *W \"! !71,#&71\"+D$7%+:% !71,#&71\"+(%4#6B#!!%$##  $\"#  \"#  "),
          peg$decode("! !71,#&71\"+~$7'+t% !71,#&71\"+b%7&+X% !71,#&71\"+F%7*+<% !71,#&71\"+*%4'6C'#%#!%$'#  $&#  $%#  $$#  $##  $\"#  \"#  *\xC8 \"! !71,#&71\"+\xB5$.D\"\"2D3E+\xA5% !71,#&71\"+\x93%7,+\x89% !71,#&71\"+w%.,\"\"2,3-+g% !71,#&71\"+U%7%+K% !71,#&71\"+9%..\"\"2.3/+)%4*6F*\"&\"%$*#  $)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode(".%\"\"2%3&*5 \".G\"\"2G3H*) \".I\"\"2I3J"),
          peg$decode("!!!74+5$ !73,#&73\"+#%'\"%$\"#  \"#  +! (%+\x89$ !71,#&71\"+w%.,\"\"2,3-+g% !71,#&71\"+U%7)+K% !71,#&71\"+9%..\"\"2.3/+)%4'6K'\"&\"%$'#  $&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode("7**/ \"70*) \"7,*# \"7+"),
          peg$decode("!7(+g$ !71,#&71\"+U%.L\"\"2L3M+E% !71,#&71\"+3%7)+)%4%6N%\"$ %$%#  $$#  $##  $\"#  \"#  */ \"!7(+' 4!6O!! %"),
          peg$decode("!.P\"\"2P3Q*) \".R\"\"2R3S+' 4!6T!! %*/ \"!76+' 4!6U!! %"),
          peg$decode("!! !73+&$,#&73\"\"\"  +! (%+' 4!6V!! %"),
          peg$decode("!! !73+&$,#&73\"\"\"  +! (%+X$.4\"\"2435+H%! !73+&$,#&73\"\"\"  +! (%+)%4#6W#\"\" %$##  $\"#  \"#  "),
          peg$decode("!.X\"\"2X3Y+X$.4\"\"2435+H%! !73+&$,#&73\"\"\"  +! (%+)%4#6Z#\"\" %$##  $\"#  \"#  "),
          peg$decode("!! !73+&$,#&73\"\"\"  +! (%+\xA6$ !71,#&71\"+\x94%.9\"\"293:+\x84% !71,#&71\"+r%7/+h% !71,#&71\"+V%.L\"\"2L3M+F% !71,#&71\"+4%7.+*%4)6[)#($ %$)#  $(#  $'#  $&#  $%#  $$#  $##  $\"#  \"#  *\x87 \"!! !73+&$,#&73\"\"\"  +! (%+g$ !71,#&71\"+U%.9\"\"293:+E% !71,#&71\"+3%7/+)%4%6\\%\"$ %$%#  $$#  $##  $\"#  \"#  "),
          peg$decode("!! !74+&$,#&74\"\"\"  +! (%+' 4!6]!! %"),
          peg$decode("!.^\"\"2^3_+\x84$! !73+&$,#&73\"\"\"  +! (%+e% !71,#&71\"+S%.,\"\"2,3-+C%7)+9%..\"\"2.3/+)%4&6`&\"$!%$&#  $%#  $$#  $##  $\"#  \"#  "),
          peg$decode(" !0a\"\"1!3b+,$,)&0a\"\"1!3b\"\"\"  "),
          peg$decode(".c\"\"2c3d"),
          peg$decode("0e\"\"1!3f"),
          peg$decode("0g\"\"1!3h"),
          peg$decode("! !71,#&71\"+b$.i\"\"2i3j*5 \".?\"\"2?3@*) \".k\"\"2k3l+:% !71,#&71\"+(%4#6m#!!%$##  $\"#  \"#  "),
          peg$decode("8! !0o\"\"1!3p+,$,)&0o\"\"1!3p\"\"\"  +' 4!6q!! %9*\" 3n")
        ],

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      function protect(object) {
        return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(protect(peg$consts[bc[ip + 1]]));
              ip += 2;
              break;

            case 1:
              stack.push(peg$currPos);
              ip++;
              break;

            case 2:
              stack.pop();
              ip++;
              break;

            case 3:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 4:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 5:
              stack.splice(-2, 1);
              ip++;
              break;

            case 6:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 7:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 8:
              stack.pop();
              stack.push(input.substring(stack[stack.length - 1], peg$currPos));
              ip++;
              break;

            case 9:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 10:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 11:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 12:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 16:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 17:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 18:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 19:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 20:
              peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 21:
              peg$reportedPos = peg$currPos;
              ip++;
              break;

            case 22:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 23:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 24:
              peg$silentFails++;
              ip++;
              break;

            case 25:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }

    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();